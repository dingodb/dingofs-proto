// Copyright (c) 2023 dingodb.com, Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "dingofs/error.proto";
import "dingofs/mds.proto";

package dingofs.pb.debug;

option cc_generic_services = true;
option go_package = "dingofs/proto/debug";

enum LogLevel {
  DEBUG = 0;
  INFO = 1;
  WARNING = 2;
  ERROR = 3;
  FATAL = 4;
}

message LogDetail {
  // Sets the maximum number of seconds which logs may be buffered for.
  uint32 log_buf_secs = 1;
  // Sets the maximum log file size (in MB)
  uint32 max_log_size = 2;
  // Sets whether to avoid logging to the disk if the disk is full.
  bool stop_logging_if_full_disk = 3;
  // set verbose
  uint32 verbose = 4;
}

message GetLogLevelRequest {
  dingofs.pb.mds.RequestInfo info = 1;
};

message GetLogLevelResponse {
  dingofs.pb.mds.ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  LogLevel log_level = 3;
  LogDetail log_detail = 4;
};

message ChangeLogLevelRequest {
  dingofs.pb.mds.RequestInfo info = 1;
  LogLevel log_level = 2;
  LogDetail log_detail = 3;
};

message ChangeLogLevelResponse {
  dingofs.pb.mds.ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;
};


message GetFsRequest {
  dingofs.pb.mds.RequestInfo info = 1;

  uint32 fs_id = 10;
}

message GetFsResponse {
  dingofs.pb.mds.ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  repeated dingofs.pb.mds.FsInfo fses = 10;
}

message GetPartitionRequest {
  dingofs.pb.mds.RequestInfo info = 1;

  uint32 fs_id = 10;
  // optional, if empty, return all partitions
  uint64 parent = 11;
  // optional, if empty, return all children
  string name = 12;

  bool with_inode = 20;
}

message GetPartitionResponse {
  dingofs.pb.mds.ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  message Entry {
    dingofs.pb.mds.Dentry dentry = 1;
    dingofs.pb.mds.Inode inode = 2;
  }

  message Partition {
    dingofs.pb.mds.Inode parent_inode = 1;
    repeated Entry entries = 2;
  }

  repeated Partition partitions = 10;
}

message GetInodeRequest {
  dingofs.pb.mds.RequestInfo info = 1;

  uint32 fs_id = 10;
  bool use_cache = 11; // if true, use cache, otherwise, fetch from storage
  repeated uint64 inoes = 12;
}

message GetInodeResponse {
  dingofs.pb.mds.ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  repeated dingofs.pb.mds.Inode inodes = 10;
}

message GetOpenFileRequest {
  dingofs.pb.mds.RequestInfo info = 1;

  uint32 fs_id = 10;
}


message GetOpenFileResponse {
  dingofs.pb.mds.ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  repeated dingofs.pb.mds.FileSession file_sessions = 10;
}

message TraceWorkerSetRequest {
  dingofs.pb.mds.RequestInfo info = 1;

  string name = 10; // workerset name
}

message TraceWorkerSetResponse {
  dingofs.pb.mds.ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  string trace = 10;
}

enum CacheType {
  CACHE_TYPE_PARTITION = 0;
  CACHE_TYPE_INODE = 1;
  CACHE_TYPE_CHUNK = 2;
}

message CleanCacheRequest {
  dingofs.pb.mds.RequestInfo info = 1;

  uint32 fs_id = 10;
  CacheType cache_type = 11;
}

message CleanCacheResponse {
  dingofs.pb.mds.ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;
}


message GetMemoryStatsRequest {
  dingofs.pb.mds.RequestInfo info = 1;

}

message GetMemoryStatsResponse {
  dingofs.pb.mds.ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  string memory_stats = 10;
}

message ReleaseFreeMemoryRequest {
  dingofs.pb.mds.RequestInfo info = 1;

  bool is_force = 2;
  double rate = 3;
}

message ReleaseFreeMemoryResponse {
  dingofs.pb.mds.ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;
}

service DebugService {
  rpc GetLogLevel(GetLogLevelRequest) returns (GetLogLevelResponse);
  rpc ChangeLogLevel(ChangeLogLevelRequest) returns (ChangeLogLevelResponse);


  rpc GetFs(GetFsRequest) returns (GetFsResponse);
  rpc GetPartition(GetPartitionRequest) returns (GetPartitionResponse);
  rpc GetInode(GetInodeRequest) returns (GetInodeResponse);

  rpc GetOpenFile(GetOpenFileRequest) returns (GetOpenFileResponse);

  rpc TraceWorkerSet(TraceWorkerSetRequest) returns (TraceWorkerSetResponse);

  rpc CleanCache(CleanCacheRequest) returns (CleanCacheResponse);

  // tcmalloc
  rpc GetMemoryStats(GetMemoryStatsRequest) returns (GetMemoryStatsResponse);
  rpc ReleaseFreeMemory(ReleaseFreeMemoryRequest) returns (ReleaseFreeMemoryResponse);
}