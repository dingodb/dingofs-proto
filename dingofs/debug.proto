// Copyright (c) 2023 dingodb.com, Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "dingofs/error.proto";
import "dingofs/mdsv2.proto";

package dingofs.pb.debug;

option cc_generic_services = true;
option go_package = "dingofs/proto/debug";

message GetFsRequest {
  dingofs.pb.mdsv2.RequestInfo info = 1;

  uint32 fs_id = 10;
}

message GetFsResponse {
  dingofs.pb.mdsv2.ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  repeated dingofs.pb.mdsv2.FsInfo fses = 10;
}

message GetPartitionRequest {
  dingofs.pb.mdsv2.RequestInfo info = 1;

  uint32 fs_id = 10;
  // optional, if empty, return all partitions
  uint64 parent_ino = 11;
  // optional, if empty, return all children
  string name = 12;

  bool with_inode = 20;
}

message GetPartitionResponse {
  dingofs.pb.mdsv2.ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  message Entry {
    dingofs.pb.mdsv2.Dentry dentry = 1;
    dingofs.pb.mdsv2.Inode inode = 2;
  }

  message Partition {
    dingofs.pb.mdsv2.Inode parent_inode = 1;
    repeated Entry entries = 2;
  }

  repeated Partition partitions = 10;
}

message GetInodeRequest {
  dingofs.pb.mdsv2.RequestInfo info = 1;

  uint32 fs_id = 10;
  bool use_cache = 11; // if true, use cache, otherwise, fetch from storage
  repeated uint64 inoes = 12;
}

message GetInodeResponse {
  dingofs.pb.mdsv2.ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  repeated dingofs.pb.mdsv2.Inode inodes = 10;
}

message GetOpenFileRequest {
  dingofs.pb.mdsv2.RequestInfo info = 1;

  uint32 fs_id = 10;
}


message GetOpenFileResponse {
  dingofs.pb.mdsv2.ResponseInfo info = 1;
  dingofs.pb.error.Error error = 2;

  message OpenFile {
    uint64 ino = 1;
    uint32 ref_count = 2;
  }

  repeated OpenFile open_files = 10;
}

service DebugService {
  rpc GetFs(GetFsRequest) returns (GetFsResponse);
  rpc GetPartition(GetPartitionRequest) returns (GetPartitionResponse);
  rpc GetInode(GetInodeRequest) returns (GetInodeResponse);

  rpc GetOpenFile(GetOpenFileRequest) returns (GetOpenFileResponse);
}