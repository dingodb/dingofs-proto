// Copyright (c) 2025 dingodb.com, Inc. All Rights Reserved
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

syntax="proto2";
package dingofs.pb.mds.cachegroup;

option cc_generic_services = true;
option go_package = "dingofs/proto/cachegroup";

enum CacheGroupErrCode {
    CacheGroupOk = 0;
    CacheGroupErrUnknown = 1;
    CacheGroupErrFailure = 2;
    CacheGroupErrNotFound = 3;
    CacheGroupErrInvalidMemberId = 4;
    CacheGroupErrInvalidGroupName = 5;
};

enum CacheGroupMemberStatus {
    CacheGroupMemberStatusUnknown = 0;
    CacheGroupMemberStatusOnline = 1;
    CacheGroupMemberStatusUnstable = 2;
    CacheGroupMemberStatusOffline = 3;
};

enum FileSystemType {
    FileSystemTypeLocal = 0;
    FileSystemType3FS = 1;
};

message LocalAccess {
    required string root_dir = 1;
    required FileSystemType filesystem_type = 2;
    required string lock_path = 3;
};

message CacheGroupMember {
    required uint64 id = 1;
    required string ip = 2;
    required uint32 port = 3;
    required uint32 weight = 4;
    optional LocalAccess local_access = 5;
};

message CacheGroupNodeMetadata {
    required uint64 birth_time = 1;
    required uint64 member_id = 2;
    required string member_uuid = 3;
};

message RegisterMemberRequest {
    optional uint64 old_id = 1;
};

message RegisterMemberResponse {
    required CacheGroupErrCode status = 1;
    optional uint64 member_id = 2;
};

message AddMemberRequest {
    required string group_name = 1;
    required CacheGroupMember member = 2;
};

message AddMemberResponse {
    required CacheGroupErrCode status = 1;
};

message LoadMembersRequest {
    required string group_name = 1;
};

message LoadMembersResponse {
    required CacheGroupErrCode status = 1;
    repeated CacheGroupMember members = 2;
};

message ReweightMemberRequest {
    required string group_name = 1;
    required uint64 member_id = 2;
    required uint32 weight = 3;
};

message ReweightMemberResponse {
    required CacheGroupErrCode status = 1;
};

message HeartbeatRequest {
    message Statistic {
        required uint64 hits = 1;
        required uint64 misses = 2;
    };

    required string group_name = 1;
    required uint64 member_id = 2;
    required Statistic stat = 3;
};

message HeartbeatResponse {
    required CacheGroupErrCode status = 1;
};

service CacheGroupMemberService {
    rpc RegisterMember(RegisterMemberRequest) returns (RegisterMemberResponse);
    rpc AddMember(AddMemberRequest) returns (AddMemberResponse);
    rpc LoadMembers(LoadMembersRequest) returns (LoadMembersResponse);
    rpc ReweightMember(ReweightMemberRequest) returns (ReweightMemberResponse);
    rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
};
