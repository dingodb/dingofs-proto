// Copyright (c) 2025 dingodb.com, Inc. All Rights Reserved
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

syntax="proto2";
package dingofs.pb.mds.cachegroup;

option cc_generic_services = true;
option go_package = "dingofs/proto/cachegroup";

enum CacheGroupErrCode {
    CacheGroupOk = 0;
    CacheGroupErrFailure = 1;
    CacheGroupErrNotFound = 2;
    CacheGroupErrAlreadyExist = 3;
    CacheGroupErrInvalidParam = 4;
    CacheGroupErrNetError = 5;
};

enum CacheGroupMemberState {
    CacheGroupMemberStateUnknown = 0;
    CacheGroupMemberStateOnline = 1;
    CacheGroupMemberStateUnstable = 2;
    CacheGroupMemberStateOffline = 3;
};

message CacheGroupMember {
    required string id = 1;
    required string ip = 2;
    required uint32 port = 3;
    required uint32 weight = 4;
    required uint64 create_time_s = 5;
    required uint64 last_online_time_ms = 6;
    required CacheGroupMemberState state = 7;
    optional string group_name = 8; // belong to which cache group
};

message RegisterMemberRequest {
    required string ip = 1;
    required uint32 port = 2;
    required string want_id = 3;
};

message RegisterMemberResponse {
    required CacheGroupErrCode status = 1;
    optional string member_id = 2;
};

message DeregisterMemberRequest {
    required string ip = 1;
    required uint32 port = 2;
};

message DeregisterMemberResponse {
    required CacheGroupErrCode status = 1;
};

message DeleteMemberIdRequest {
    required string member_id = 1;
};

message DeleteMemberIdResponse {
    required CacheGroupErrCode status = 1;
};

message HeartbeatRequest {
    required string ip = 1;
    required uint32 port = 2;
};

message HeartbeatResponse {
    required CacheGroupErrCode status = 1;
};

message ReweightMemberRequest {
    required string member_id = 1;
    required uint32 weight = 2;
};

message ReweightMemberResponse {
    required CacheGroupErrCode status = 1;
};

message ListMembersRequest {
    optional string group_name = 1; // if not set, list all members
};

message ListMembersResponse {
    required CacheGroupErrCode status = 1;
    repeated CacheGroupMember members = 2;
};

message JoinCacheGroupRequest {
    required string group_name = 1;
    required string ip = 2;
    required uint32 port = 3;
    required uint32 weight = 4;
};

message JoinCacheGroupResponse {
    required CacheGroupErrCode status = 1;
    optional string member_id = 2;
};

message LeaveCacheGroupRequest {
    required string group_name = 1;
    optional string ip = 2; // one of endpoint or member_id
    optional uint32 port = 3;
    optional string member_id = 4;
};

message LeaveCacheGroupResponse {
    required CacheGroupErrCode status = 1;
};

message ListGroupsRequest {};

message ListGroupsResponse {
    repeated string group_names = 1;
};

service CacheGroupMemberService {
    rpc RegisterMember(RegisterMemberRequest) returns (RegisterMemberResponse);
    rpc DeregisterMember(DeregisterMemberRequest) returns (DeregisterMemberResponse);
    rpc DeleteMemberId(DeleteMemberIdRequest) returns (DeleteMemberIdResponse);
    rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
    rpc ReweightMember(ReweightMemberRequest) returns (ReweightMemberResponse);
    rpc ListMembers(ListMembersRequest) returns (ListMembersResponse);

    rpc JoinCacheGroup(JoinCacheGroupRequest) returns (JoinCacheGroupResponse);
    rpc LeaveCacheGroup(LeaveCacheGroupRequest) returns (LeaveCacheGroupResponse);
    rpc ListGroups(ListGroupsRequest) returns (ListGroupsResponse);
};
