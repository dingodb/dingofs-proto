// Copyright (c) 2023 dingodb.com, Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "dingofs/error.proto";

package dingofs.pb.mdsv2;

option cc_generic_services = true;
option go_package = "dingofs/proto/mdsv2";


enum FsType {
  S3 = 0; //  use s3 as backend data store
  RADOS = 1; // use ceph rados as backend data store
}

enum FsStatus {
  NEW = 0;
  INITED = 1;
  DELETING = 2;
}

enum PartitionType {
  MONOLITHIC_PARTITION = 0;
  PARENT_ID_PARTITION = 1;
}

enum FileType {
  DIRECTORY = 0;
  FILE = 1;
  SYM_LINK = 2;
};

message MountPoint {
  string hostname = 1;
  uint32 port = 2;
  string path = 3;
  bool cto = 4;
}

message S3Info {
  string ak = 1;
  string sk = 2;
  string endpoint = 3;
  string bucketname = 4;
  uint64 block_size = 5;
  uint64 chunk_size = 6;
  uint32 object_prefix = 7;
}

message FsDetail {
  S3Info s3_info = 1;
}

message FsInfo {
  uint32 fs_id = 1;
  string fs_name = 2;
  FsStatus status = 3;
  uint64 root_inode_id = 4;
  uint64 capacity = 5;
  uint64 block_size = 6;
  repeated MountPoint mount_points = 8;
  FsType fs_type = 9;
  PartitionType partition_type = 10;
  FsDetail detail = 11;
  bool enable_sum_in_dir = 12; // enable sum in dir
  string owner = 13;
  uint32 recycle_time_hour = 15;
  string uuid = 16;
  uint64 epoch = 20; // represent the epoch of the mds_ids
  repeated uint64 mds_ids = 21; // the fs select mds
}

message S3Chunk {
  uint64 chunk_id = 1;
  uint64 compaction = 2;
  uint64 offset = 3;
  uint64 len = 4;
  uint64 size = 5;
  bool zero = 6;
};

message S3ChunkList {
  repeated S3Chunk s3_chunks = 1;
};

message Dentry {
  uint32 fs_id = 1;
  uint64 inode_id = 2;
  uint64 parent_inode_id = 3;
  string name = 4;
  uint32 flag = 5;
  FileType type = 6;
}

message Inode {
  uint32 fs_id = 1;
  uint64 inode_id = 2;
  uint64 length = 3;
  uint64 ctime = 4;
  uint64 mtime = 5;
  uint64 atime = 6;
  uint32 uid = 10;
  uint32 gid = 11;
  uint32 mode = 12;
  uint32 nlink = 13;
  FileType type = 14;
  string symlink = 15;
  uint64 rdev = 16;
  map<uint64, S3ChunkList> s3_chunk_map = 18;
  uint32 dtime = 19;
  uint32 openmpcount = 20;
  map<string, bytes> xattr = 21;
}

message RequestInfo {
  int64 request_id = 1;
}

message TimeInfo {
  int64 total_rpc_time_ns = 1;
}

message ResponseInfo {
  TimeInfo time_info = 1;
}

message Context {
}

// fs interface

message CreateFsRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  string fs_name = 10;
  uint64 block_size = 11;
  FsType fs_type = 12;
  FsDetail fs_detail = 13;
  bool enable_sum_in_dir = 14;
  string owner = 15;
  uint64 capacity = 16;
  uint32 recycle_time_hour = 17;
}

message CreateFsResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;

  FsInfo fs_info = 10;
}

message MountFsRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  string fs_name = 10;
  MountPoint mount_point = 11;
}

message MountFsResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;
}

message UmountFsRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  string fs_name = 10;
  MountPoint mount_point = 11;
}

message UmountFsResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;
}

message DeleteFsRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  string fs_name = 10;
}

message DeleteFsResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;
}

message GetFsInfoRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  string fs_name = 10;
}

message GetFsInfoResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;

  FsInfo fs_info = 10;
}

// dentry interface

message CreateDentryRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  Dentry dentry = 11;
}

message CreateDentryResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;
}

message DeleteDentryRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  uint32 fs_id = 10; // required
  uint64 inode_id = 11; // either inode_id or name 
  string name = 12;
}

message DeleteDentryResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;
}

message GetDentryRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  uint32 fs_id = 10;  // required
  uint64 inode_id = 11; // either inode_id or name 
  string name = 12;
}


message GetDentryResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;

  Dentry dentry = 10;
}

message ListDentryRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  uint32 fs_id = 10; // required
  uint64 inode_id = 11; // parent inode id
  string last = 12;     // the name of last entry
  uint32 limit = 13;    // the number of entry required
  bool is_only_dir = 14; // is only list dir
}

message ListDentryResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;

  repeated Dentry dentries = 10;
}

// inode interface

message CreateInodeRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 length = 11;
  uint32 uid = 12;
  uint32 gid = 13;
  uint32 mode = 14;
  FileType type = 15;
  uint64 parent_inode_id = 16;
  uint64 rdev = 17;
  string symlink = 18;   // TYPE_SYM_LINK only
}


message CreateInodeResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;

  Inode inode = 10;
}

message DeleteInodeRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 inode_id = 11;
}

message DeleteInodeResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;
}

message UpdateInodeRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 inode_id = 11;
  repeated string update_fields = 12; // update field name,for example: ["ctime", "mtime", ...]

  uint64 length = 20;
  uint64 ctime = 21;
  uint64 mtime = 22;
  uint64 atime = 23;
  uint32 uid = 24;
  uint32 gid = 25;
  uint32 mode = 26;
  uint32 nlink = 27;
  map<string, bytes> xattr = 28;
}

message UpdateInodeResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;
}

message UpdateS3ChunkRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 inode_id = 11;
  map<uint64, S3ChunkList> s3_chunk_increment = 12;
  map<uint64, S3ChunkList> s3_chunk_decrement = 13;
  bool is_return = 14;
  bool is_from_s3_compaction = 15;
}

message UpdateS3ChunkResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;

  map<uint64, S3ChunkList> s3_chunk_map = 10;
}

message GetInodeRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 inode_id = 11;
}

message GetInodeResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;

  optional Inode inode = 10;
}

message BatchGetXAttrRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  repeated uint64 inode_ids = 11;
}

message XAttr {
  uint32 fs_id = 1;
  uint64 inode_id = 2;
  map<string, bytes> xattr = 3;
}

message BatchGetXAttrResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;

  repeated XAttr xattrs = 10;
}

// quota interface

message Quota {
  uint64 max_bytes = 1;
  uint64 max_inodes = 2;
  int64 used_bytes = 3;
  int64 used_inodes = 4;
};

message Usage {
  int64 bytes = 1;
  int64 inodes = 2;
};

message SetFsQuotaRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  Quota quota = 11;
};

message SetFsQuotaResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;
};

message GetFsQuotaRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  uint32 fs_id = 10;
};

message GetFsQuotaResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;

  Quota quota = 10;
};

message FlushFsUsageRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  Usage usage = 11;
};

message FlushFsUsageResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;

  Quota quota = 10;
};

message SetDirQuotaRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 dir_inode_id = 11;
  Quota quota = 12;
};

message SetDirQuotaResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;
};

message GetDirQuotaRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 dir_inode_id = 11;
};

message GetDirQuotaResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;

  Quota quota = 10;
};

message DeleteDirQuotaRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 dir_inode_id = 11;
};

message DeleteDirQuotaResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;
};

message LoadDirQuotasRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  uint32 fs_id = 4;
};

message LoadDirQuotasResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;

  map<uint64, Quota> quotas = 10;
};

message FlushDirUsagesRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  map<uint64, Usage> usages = 11;
};

message FlushDirUsagesResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;
};

// high level interface

message LookupRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 parent_inode_id = 11;
  string name = 12;
}

message LookupResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;

  Inode inode = 10;
}

message MkNodRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  string name = 11;
  uint32 flag = 12;
  uint64 length = 13;
  uint32 uid = 14;
  uint32 gid = 15;
  uint32 mode = 16;
  FileType type = 17;
  uint64 parent_inode_id = 18;
  uint64 rdev = 19;
}

message MkNodResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;

  Inode inode = 10;
}

message MkDirRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  string name = 11;
  uint32 flag = 12;
  uint64 length = 13;
  uint32 uid = 14;
  uint32 gid = 15;
  uint32 mode = 16;
  FileType type = 17;
  uint64 parent_inode_id = 18;
  uint64 rdev = 19;
}

message MkDirResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;

  Inode inode = 10;
}

message RmDirRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 parent_inode_id = 11;
  string name = 12;
}

message RmDirResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;
}


message LinkRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  string name = 11;
  uint64 inode_id = 12;
  uint64 parent_inode_id = 13;
}

message LinkResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;
}

message UnLinkRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  string name = 11;
  uint64 parent_inode_id = 12;
}

message UnLinkResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;
}


message SymlinkRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  string name = 11;
  uint32 flag = 12;
  uint64 length = 13;
  uint32 uid = 14;
  uint32 gid = 15;
  uint32 mode = 16;
  uint64 parent_inode_id = 18;
  uint64 rdev = 19;
  string symlink = 20;   // TYPE_SYM_LINK only
}

message SymlinkResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;

  Inode inode = 10;
}

message ReadLinkRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 inode_id = 11;
}

message ReadLinkResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;

  string symlink = 10;
}

message GetAttrRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 inode_id = 11;
}

message GetAttrResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;

  Inode inode = 10;
}

message SetAttrRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 inode_id = 11;

  // update field name,for example: ["ctime", "mtime", ...]
  repeated string update_fields = 12;

  uint64 length = 20;
  uint64 ctime = 21;
  uint64 mtime = 22;
  uint64 atime = 23;
  uint32 uid = 24;
  uint32 gid = 25;
  uint32 mode = 26;
}

message SetAttrResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;

  Inode inode = 10;
}

message GetXAttrRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 inode_id = 11;
  string name = 12;
}

message GetXAttrResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;

  bytes value = 10;
} 

message SetXAttrRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 inode_id = 11;

  map<string, bytes> xattrs = 12;
}

message SetXAttrResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;
}

message ListXAttrRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 inode_id = 11;
}

message ListXAttrResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;

  map<string, bytes> xattrs = 10;
}

message RenameRequest {
  RequestInfo request_info = 1;
  Context context = 2;

  uint32 fs_id = 10;
  uint64 old_parent_inode_id = 11;
  string old_name = 12;
  uint64 new_parent_inode_id = 13;
  string new_name = 14;
}

message RenameResponse {
  ResponseInfo response_info = 1;
  dingofs.pb.error.Error error = 2;
}


service MDSService {
  // fs interface
  rpc CreateFs(CreateFsRequest) returns (CreateFsResponse);
  rpc MountFs(MountFsRequest) returns (MountFsResponse);
  rpc UmountFs(UmountFsRequest) returns (UmountFsResponse);
  rpc DeleteFs(DeleteFsRequest) returns (DeleteFsResponse);
  rpc GetFsInfo(GetFsInfoRequest) returns (GetFsInfoResponse);

  // dentry interface
  rpc CreateDentry(CreateDentryRequest) returns (CreateDentryResponse); // discard
  rpc DeleteDentry(DeleteDentryRequest) returns (DeleteDentryResponse); // discard
  rpc GetDentry(GetDentryRequest) returns (GetDentryResponse);
  rpc ListDentry(ListDentryRequest) returns (ListDentryResponse);

  // inode interface
  rpc CreateInode(CreateInodeRequest) returns (CreateInodeResponse); // discard
  rpc DeleteInode(DeleteInodeRequest) returns (DeleteInodeResponse); // discard
  rpc UpdateInode(UpdateInodeRequest) returns (UpdateInodeResponse); // discard
  rpc UpdateS3Chunk(UpdateS3ChunkRequest) returns (UpdateS3ChunkResponse);
  rpc GetInode(GetInodeRequest) returns (GetInodeResponse);
  rpc BatchGetXAttr(BatchGetXAttrRequest) returns (BatchGetXAttrResponse);
  
  // high level interface
  rpc Lookup(LookupRequest) returns (LookupResponse);
  rpc MkNod(MkNodRequest) returns (MkNodResponse);
  rpc MkDir(MkDirRequest) returns (MkDirResponse);
  rpc RmDir(RmDirRequest) returns (RmDirResponse);
  rpc Link(LinkRequest) returns (LinkResponse);
  rpc UnLink(UnLinkRequest) returns (UnLinkResponse);
  rpc Symlink(SymlinkRequest) returns (SymlinkResponse);
  rpc ReadLink(ReadLinkRequest) returns (ReadLinkResponse);

  rpc GetAttr(GetAttrRequest) returns (GetAttrResponse);
  rpc SetAttr(SetAttrRequest) returns (SetAttrResponse);
  rpc GetXAttr(GetXAttrRequest) returns (GetXAttrResponse);
  rpc SetXAttr(SetXAttrRequest) returns (SetXAttrResponse);
  rpc ListXAttr(ListXAttrRequest) returns (ListXAttrResponse);

  rpc Rename(RenameRequest) returns (RenameResponse);

  // quota interface
  rpc SetFsQuota(SetFsQuotaRequest) returns (SetFsQuotaResponse);
  rpc GetFsQuota(GetFsQuotaRequest) returns (GetFsQuotaResponse);
  rpc FlushFsUsage(FlushFsUsageRequest) returns (FlushFsUsageResponse);
  rpc SetDirQuota(SetDirQuotaRequest) returns (SetDirQuotaResponse);
  rpc GetDirQuota(GetDirQuotaRequest) returns (GetDirQuotaResponse);
  rpc DeleteDirQuota(DeleteDirQuotaRequest) returns (DeleteDirQuotaResponse);
  rpc LoadDirQuotas(LoadDirQuotasRequest) returns (LoadDirQuotasResponse);
  rpc FlushDirUsages(FlushDirUsagesRequest) returns (FlushDirUsagesResponse);
}
